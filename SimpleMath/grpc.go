//Generated by GRPC Go plugin
package SimpleMath

import "github.com/google/flatbuffers/go"

import (
  grpc "google.golang.org/grpc"
  context "golang.org/x/net/context"
)

// FlatCodec implements Grpc-go Codec

type FlatCodec struct{}

func (FlatCodec) Marshal(v interface{}) ([]byte, error) {
  return v.(*flatbuffers.Builder).FinishedBytes(), nil
}

func (FlatCodec) Unmarshal(data []byte, v interface{}) error {
  v.(flatbuffersInit).Init(data, flatbuffers.GetUOffsetT(data))
  return nil
}

func (FlatCodec) String() string {
  return "flatbuffers"}

type flatbuffersInit interface {
  Init(data []byte, i flatbuffers.UOffsetT)
}

// Client API for Math service
type MathClient interface{
  Mod2(ctx context.Context, in *flatbuffers.Builder, opts... grpc.CallOption) (* NumRes, error)  
  AddNumbers(ctx context.Context, opts... grpc.CallOption) (Math_AddNumbersClient, error)  
  Squares(ctx context.Context, in *flatbuffers.Builder, opts... grpc.CallOption) (Math_SquaresClient, error)  
  IsOdd(ctx context.Context, opts... grpc.CallOption) (Math_IsOddClient, error)  
}

type mathClient struct{
  cc *grpc.ClientConn
}

func NewMathClient(cc *grpc.ClientConn) MathClient {
  return &mathClient{cc}
}

func (c *mathClient) Mod2(ctx context.Context, in *flatbuffers.Builder, opts... grpc.CallOption) (* NumRes, error){
  out := new(NumRes)
  err := grpc.Invoke(ctx, "/SimpleMath.Math/Mod2", in, out, c.cc, opts...)
  if err != nil { return nil, err }
  return out, nil
}

func (c *mathClient) AddNumbers(ctx context.Context, opts... grpc.CallOption) (Math_AddNumbersClient, error){
  stream, err := grpc.NewClientStream(ctx, &_Math_serviceDesc.Streams[0], c.cc, "/SimpleMath.Math/AddNumbers", opts...)
  if err != nil { return nil, err }
  x := &mathAddNumbersClient{stream}
  return x,nil
}

type Math_AddNumbersClient interface{
  Send(*flatbuffers.Builder) error
  CloseAndRecv() (*NumRes, error)
  grpc.ClientStream
}

type mathAddNumbersClient struct{
  grpc.ClientStream
}

func (x *mathAddNumbersClient) Send(m *flatbuffers.Builder) error{
  return x.ClientStream.SendMsg(m)
}

func (x *mathAddNumbersClient) CloseAndRecv() (* NumRes, error){
  if err := x.ClientStream.CloseSend(); err != nil { return nil, err }
  m := new (NumRes)
  if err := x.ClientStream.RecvMsg(m); err != nil { return nil, err }
  return m, nil
}

func (c *mathClient) Squares(ctx context.Context, in *flatbuffers.Builder, opts... grpc.CallOption) (Math_SquaresClient, error){
  stream, err := grpc.NewClientStream(ctx, &_Math_serviceDesc.Streams[1], c.cc, "/SimpleMath.Math/Squares", opts...)
  if err != nil { return nil, err }
  x := &mathSquaresClient{stream}
  if err := x.ClientStream.SendMsg(in); err != nil { return nil, err }
  if err := x.ClientStream.CloseSend(); err != nil { return nil, err }
  return x,nil
}

type Math_SquaresClient interface{
  Recv() (*NumRes, error)
  grpc.ClientStream
}

type mathSquaresClient struct{
  grpc.ClientStream
}

func (x *mathSquaresClient) Recv() (* NumRes, error){
  m := new(NumRes)
  if err := x.ClientStream.RecvMsg(m); err != nil { return nil, err }
  return m, nil
}

func (c *mathClient) IsOdd(ctx context.Context, opts... grpc.CallOption) (Math_IsOddClient, error){
  stream, err := grpc.NewClientStream(ctx, &_Math_serviceDesc.Streams[2], c.cc, "/SimpleMath.Math/IsOdd", opts...)
  if err != nil { return nil, err }
  x := &mathIsOddClient{stream}
  return x,nil
}

type Math_IsOddClient interface{
  Send(*flatbuffers.Builder) error
  Recv() (*NumRes, error)
  grpc.ClientStream
}

type mathIsOddClient struct{
  grpc.ClientStream
}

func (x *mathIsOddClient) Send(m *flatbuffers.Builder) error{
  return x.ClientStream.SendMsg(m)
}

func (x *mathIsOddClient) Recv() (* NumRes, error){
  m := new(NumRes)
  if err := x.ClientStream.RecvMsg(m); err != nil { return nil, err }
  return m, nil
}

// Server API for Math service
type MathServer interface{
  Mod2(context.Context, *NumReq) (*flatbuffers.Builder, error)  
  AddNumbers(Math_AddNumbersServer) error  
  Squares(*NumReq, Math_SquaresServer) error  
  IsOdd(Math_IsOddServer) error  
}

func RegisterMathServer(s *grpc.Server, srv MathServer) {
  s.RegisterService(&_Math_serviceDesc, srv)
}

func _Math_Mod2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
  in := new(NumReq)
  if err := dec(in); err != nil { return nil, err }
  if interceptor == nil { return srv.(MathServer).Mod2(ctx, in) }
  info := &grpc.UnaryServerInfo{
    Server: srv,
    FullMethod: "/SimpleMath.Math/Mod2",
  }
  
  handler := func(ctx context.Context, req interface{}) (interface{}, error) {
    return srv.(MathServer).Mod2(ctx, req.(* NumReq))
  }
  return interceptor(ctx, in, info, handler)
}


func _Math_AddNumbers_Handler(srv interface{}, stream grpc.ServerStream) error {
  return srv.(MathServer).AddNumbers(&mathAddNumbersServer{stream})
}

type Math_AddNumbersServer interface{ 
  Recv() (* NumReq, error)
  SendAndClose(* flatbuffers.Builder) error
  grpc.ServerStream
}

type mathAddNumbersServer struct{
  grpc.ServerStream
}

func (x *mathAddNumbersServer) Recv() (*NumReq, error){
  m := new(NumReq)
  if err := x.ServerStream.RecvMsg(m); err != nil { return nil, err }
  return m, nil
}

func (x *mathAddNumbersServer) SendAndClose(m *flatbuffers.Builder) error{
  return x.ServerStream.SendMsg(m)
}


func _Math_Squares_Handler(srv interface{}, stream grpc.ServerStream) error {
  m := new(NumReq)
  if err := stream.RecvMsg(m); err != nil { return err }
  return srv.(MathServer).Squares(m, &mathSquaresServer{stream})
}

type Math_SquaresServer interface{ 
  Send(* flatbuffers.Builder) error
  grpc.ServerStream
}

type mathSquaresServer struct{
  grpc.ServerStream
}

func (x *mathSquaresServer) Send(m *flatbuffers.Builder) error{
  return x.ServerStream.SendMsg(m)
}


func _Math_IsOdd_Handler(srv interface{}, stream grpc.ServerStream) error {
  return srv.(MathServer).IsOdd(&mathIsOddServer{stream})
}

type Math_IsOddServer interface{ 
  Send(* flatbuffers.Builder) error
  Recv() (* NumReq, error)
  grpc.ServerStream
}

type mathIsOddServer struct{
  grpc.ServerStream
}

func (x *mathIsOddServer) Send(m *flatbuffers.Builder) error{
  return x.ServerStream.SendMsg(m)
}

func (x *mathIsOddServer) Recv() (*NumReq, error){
  m := new(NumReq)
  if err := x.ServerStream.RecvMsg(m); err != nil { return nil, err }
  return m, nil
}


var _Math_serviceDesc = grpc.ServiceDesc{
  ServiceName: "SimpleMath.Math",
  HandlerType: (*MathServer)(nil),
  Methods: []grpc.MethodDesc{
    {
      MethodName: "Mod2",
      Handler: _Math_Mod2_Handler, 
    },
  },
  Streams: []grpc.StreamDesc{
    {
      StreamName: "AddNumbers",
      Handler: _Math_AddNumbers_Handler, 
      ClientStreams: true,
    },
    {
      StreamName: "Squares",
      Handler: _Math_Squares_Handler, 
      ServerStreams: true,
    },
    {
      StreamName: "IsOdd",
      Handler: _Math_IsOdd_Handler, 
      ServerStreams: true,
      ClientStreams: true,
    },
  },
}

