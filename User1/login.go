// automatically generated by the FlatBuffers compiler, do not modify

package User1

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type login struct {
	_tab flatbuffers.Table
}

func GetRootAslogin(buf []byte, offset flatbuffers.UOffsetT) *login {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &login{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *login) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *login) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *login) Roll() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *login) Password() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func loginStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func loginAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(name), 0)
}
func loginAddRoll(builder *flatbuffers.Builder, roll flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(roll), 0)
}
func loginAddPassword(builder *flatbuffers.Builder, password flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(password), 0)
}
func loginEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
