//Generated by GRPC Go plugin
package User

import "github.com/google/flatbuffers/go"

import (
  grpc "google.golang.org/grpc"
  context "golang.org/x/net/context"
)

// Client API for FileManager service
type FileManagerClient interface{
  Store(ctx context.Context, in *flatbuffers.Builder, opts... grpc.CallOption) (* File, error)  
  Store1(ctx context.Context, opts... grpc.CallOption) (FileManager_Store1Client, error)  
  Store2(ctx context.Context, in *flatbuffers.Builder, opts... grpc.CallOption) (FileManager_Store2Client, error)  
  Store3(ctx context.Context, opts... grpc.CallOption) (FileManager_Store3Client, error)  
}

type fileManagerClient struct{
  cc *grpc.ClientConn
}

func NewFileManagerClient(cc *grpc.ClientConn) FileManagerClient {
  return &fileManagerClient{cc}
}

func (c *fileManagerClient) Store(ctx context.Context, in *flatbuffers.Builder, opts... grpc.CallOption) (* File, error){
  out := new(File)
  err := grpc.Invoke(ctx, "/User.FileManager/Store", in, out, c.cc, opts...)
  if err != nil { return nil, err }
  return out, nil
}

func (c *fileManagerClient) Store1(ctx context.Context, opts... grpc.CallOption) (FileManager_Store1Client, error){
  stream, err := grpc.NewClientStream(ctx, &_FileManager_serviceDesc.Streams[0], c.cc, "/User.FileManager/Store1", opts...)
  if err != nil { return nil, err }
  x := &fileManagerStore1Client{stream}
  return x,nil
}

type FileManager_Store1Client interface{
  Send(*flatbuffers.Builder) error
  SendAndClose() (*File, error)
  grpc.ClientStream
}

type fileManagerStore1Client struct{
  grpc.ClientStream
}

func (x *fileManagerStore1Client) Send(m *flatbuffers.Builder) error{
  return x.ClientStream.SendMsg(m)
}

func (x *fileManagerStore1Client) SendAndClose() (* File, error){
  if err := x.ClientStream.CloseSend(); err != nil { return nil, err }
  m := new (File)
  if err := x.ClientStream.RecvMsg(m); err != nil { return nil, err }
  return m, nil
}

func (c *fileManagerClient) Store2(ctx context.Context, in *flatbuffers.Builder, opts... grpc.CallOption) (FileManager_Store2Client, error){
  stream, err := grpc.NewClientStream(ctx, &_FileManager_serviceDesc.Streams[1], c.cc, "/User.FileManager/Store2", opts...)
  if err != nil { return nil, err }
  x := &fileManagerStore2Client{stream}
  if err := x.ClientStream.SendMsg(in); err != nil { return nil, err }
  if err := x.ClientStream.CloseSend(); err != nil { return nil, err }
  return x,nil
}

type FileManager_Store2Client interface{
  Recv() (*File, error)
  grpc.ClientStream
}

type fileManagerStore2Client struct{
  grpc.ClientStream
}

func (x *fileManagerStore2Client) Recv() (* File, error){
  m := new(File)
  if err := x.ClientStream.RecvMsg(m); err != nil { return nil, err }
  return m, nil
}

func (c *fileManagerClient) Store3(ctx context.Context, opts... grpc.CallOption) (FileManager_Store3Client, error){
  stream, err := grpc.NewClientStream(ctx, &_FileManager_serviceDesc.Streams[2], c.cc, "/User.FileManager/Store3", opts...)
  if err != nil { return nil, err }
  x := &fileManagerStore3Client{stream}
  return x,nil
}

type FileManager_Store3Client interface{
  Send(*flatbuffers.Builder) error
  Recv() (*File, error)
  grpc.ClientStream
}

type fileManagerStore3Client struct{
  grpc.ClientStream
}

func (x *fileManagerStore3Client) Send(m *flatbuffers.Builder) error{
  return x.ClientStream.SendMsg(m)
}

func (x *fileManagerStore3Client) Recv() (* File, error){
  m := new(File)
  if err := x.ClientStream.RecvMsg(m); err != nil { return nil, err }
  return m, nil
}

// Server API for FileManager service
type FileManagerServer interface{
  Store(context.Context, *flatbuffers.Builder) (*File, error)  
  Store1(FileManager_Store1Server) error  
  Store2(*flatbuffers.Builder, FileManager_Store2Server) error  
  Store3(FileManager_Store3Server) error  
}

func RegisterFileManagerServer(s *grpc.Server, srv FileManagerServer) {
  s.RegisterService(&_FileManager_serviceDesc, srv)
}

func _FileManager_Store_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
  in := new(flatbuffers.Builder)
  if err := dec(in); err != nil { return nil, err }
  if interceptor == nil { return srv.(FileManagerServer).Store(ctx, in) }
  info := &grpc.UnaryServerInfo{
    Server: srv,
    FullMethod: "/User.FileManager/Store",
  }
  
  handler := func(ctx context.Context, req interface{}) (interface{}, error) {
    return srv.(FileManagerServer).Store(ctx, req.(* flatbuffers.Builder))
  }
  return interceptor(ctx, in, info, handler)
}


func _FileManager_Store1_Handler(srv interface{}, stream grpc.ServerStream) error {
  return srv.(FileManagerServer).Store1(&fileManagerStore1Server{stream})
}

type FileManager_Store1Server interface{ 
  Send(* File) error
  SendAndClose(* File) error
  grpc.ServerStream
}

type fileManagerStore1Server struct{
  grpc.ServerStream
}

func (x *fileManagerStore1Server) Send(m *File) error{
  return x.ServerStream.SendMsg(m)
}

func (x *fileManagerStore1Server) SendAndClose(m *File) error{
  return x.ServerStream.SendMsg(m)
}


func _FileManager_Store2_Handler(srv interface{}, stream grpc.ServerStream) error {
  m := new(flatbuffers.Builder)
  if err := stream.RecvMsg(m); err != nil { return err }
  return srv.(FileManagerServer).Store2(m, &fileManagerStore2Server{stream})
}

type FileManager_Store2Server interface{ 
  Recv() (* flatbuffers.Builder, error)
  grpc.ServerStream
}

type fileManagerStore2Server struct{
  grpc.ServerStream
}

func (x *fileManagerStore2Server) Recv() (*flatbuffers.Builder, error){
  m := new(flatbuffers.Builder)
  if err := x.ServerStream.RecvMsg(m); err != nil { return nil, err }
  return m, nil
}


func _FileManager_Store3_Handler(srv interface{}, stream grpc.ServerStream) error {
  return srv.(FileManagerServer).Store3(&fileManagerStore3Server{stream})
}

type FileManager_Store3Server interface{ 
  Send(* File) error
  Recv() (* flatbuffers.Builder, error)
  grpc.ServerStream
}

type fileManagerStore3Server struct{
  grpc.ServerStream
}

func (x *fileManagerStore3Server) Send(m *File) error{
  return x.ServerStream.SendMsg(m)
}

func (x *fileManagerStore3Server) Recv() (*flatbuffers.Builder, error){
  m := new(flatbuffers.Builder)
  if err := x.ServerStream.RecvMsg(m); err != nil { return nil, err }
  return m, nil
}


var _FileManager_serviceDesc = grpc.ServiceDesc{
  ServiceName: "User.FileManager",
  HandlerType: (*FileManagerServer)(nil),
  Methods: []grpc.MethodDesc{
    {
      MethodName: "Store",
      Handler: _FileManager_Store_Handler, 
    },
  },
  Streams: []grpc.StreamDesc{
    {
      StreamName: "Store1",
      Handler: _FileManager_Store1_Handler, 
      ClientStreams: true,
    },
    {
      StreamName: "Store2",
      Handler: _FileManager_Store2_Handler, 
      ServerStreams: true,
    },
    {
      StreamName: "Store3",
      Handler: _FileManager_Store3_Handler, 
      ServerStreams: true,
      ClientStreams: true,
    },
  },
}

